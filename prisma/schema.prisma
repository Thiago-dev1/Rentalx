// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  Car         Car[]
}

model Specification {
  id                 String               @id @default(uuid())
  name               String
  description        String
  createdAt          DateTime             @default(now())
  SpecificationsCars SpecificationsCars[]
}

model Users {
  id            String       @id @default(uuid())
  name          String
  password      String
  email         String       @unique
  avatar        String?
  driverLicense String
  isAdmin       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  Rentals       Rentals[]
  UsersToken    UsersToken[]
}

model UsersToken {
  id            String   @id @default(uuid())
  refresh_token String
  User          Users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id       String
  expires_date  DateTime
  createdAt     DateTime @default(now())

  @@map("users_tokens")
}

model Car {
  id                 String               @id @default(uuid())
  name               String
  description        String
  dailyRate          Int
  available          Boolean              @default(true)
  license_plate      String
  fine_amount        Int
  brand              String
  Category           Category?            @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  category_id        String?
  createdAt          DateTime             @default(now())
  SpecificationsCars SpecificationsCars[]
  CarsImage          CarsImage[]
  Rentals            Rentals[]

  @@map("cars")
}

model SpecificationsCars {
  id               String        @id @default(uuid())
  Car              Car           @relation(fields: [car_id], references: [id])
  car_id           String
  Specification    Specification @relation(fields: [specification_id], references: [id])
  specification_id String
  createdAt        DateTime      @default(now())

  @@map("specifications_cars")
}

model CarsImage {
  id         String   @id @default(uuid())
  Car        Car      @relation(fields: [car_id], references: [id])
  car_id     String
  image_name String
  createdAt  DateTime @default(now())

  @@map("cars_image")
}

model Rentals {
  id                   String    @id @default(uuid())
  User                 Users     @relation(fields: [user_id], references: [id])
  user_id              String
  Car                  Car       @relation(fields: [car_id], references: [id])
  car_id               String
  stard_dte            DateTime  @default(now())
  end_date             DateTime?
  expected_return_date DateTime
  total                Int?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("rentals")
}
